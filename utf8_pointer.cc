//---------------------------------------------------------------------------

#include "utf8_pointer.h"

//---------------------------------------------------------------------------

const uint8_t Utf8Pointer::DECODE_TABLE[] = {
    // 0-127
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //

    // 128-191 = invalid codes
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //

    // 192-223 = 2 byte code
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, //
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, //

    // 224-239 = 3 byte code
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, //

    // 240-247 = 4 byte code
    // 248-255 = invalid code
    4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0 //
};

size_t Utf8Pointer::Set(uint32_t c) {
  if (c < 0x80) {
    p[0] = c;
    return 1;
  } else if (c < 0x800) {
    p[0] = 0xc0 | (c >> 6);
    p[1] = 0x80 | (c & 0x3f);
    return 2;
  } else if (c < 0x10000) {
    p[0] = 0xe0 | (c >> 12);
    p[1] = 0x80 | ((c >> 6) & 0x3f);
    p[2] = 0x80 | (c & 0x3f);
    return 3;
  } else {
    p[0] = 0xf0 | (c >> 18);
    p[1] = 0x80 | ((c >> 12) & 0x3f);
    p[2] = 0x80 | ((c >> 6) & 0x3f);
    p[3] = 0x80 | (c & 0x3f);
    return 4;
  }
}

void Utf8Pointer::SetAndAdvance(uint32_t c) { p += Set(c); }

uint32_t Utf8Pointer::BytesForCharacterCode(uint32_t c) {
  if (c < 0x80) {
    return 1;
  } else if (c < 0x800) {
    return 2;
  } else if (c < 0x10000) {
    return 3;
  } else {
    return 4;
  }
}

uint32_t Utf8Pointer::operator*() const {
  switch (DECODE_TABLE[*p]) {
  case 0:
    return 0;
  case 1:
    return p[0];
  case 2:
    return (p[0] << 6) ^ p[1] ^ 0x3080;

  case 3:
    return (p[0] << 12) ^ (p[1] << 6) ^ p[2] ^ 0xe2080;

  case 4:
    return (p[0] << 18) ^ (p[1] << 12) ^ (p[2] << 6) ^ p[3] ^ 0x3c82080;

  default:
    __builtin_unreachable();
  }
}

//---------------------------------------------------------------------------
